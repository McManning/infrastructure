
server {
    listen 1935;
    chunk_size 4000;

    # Streamer authentication
    application connect {
        live on;

        on_publish http://sybolt.com:5000/on_publish;
        on_publish_done http://sybolt.com:5000/on_publish_done;
    }

    # Encoder for both direct and potato qualities
    application live {
        live on;

        exec_push /usr/bin/ffmpeg -nostats -i rtmp://127.0.0.1/live/$name -async 1 -vsync -1
                -c copy -f flv rtmp://localhost/watch/$name_src
                -c:a aac -b:a 48k -c:v libx264 -b:v 64K -vf "scale=480:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://localhost/watch/$name_potato
                2>/usr/local/nginx/html/hls/ffmpeg-$name.log;
    }

    # HLS stream available to clients to consume
    application watch {
        live on;
        hls on;

        # Don't let this be consumed as RTMP by clients
        deny play all;

        hls_nested on;
        hls_path /usr/local/nginx/html/hls;
        hls_fragment 600ms; # Causes MORE fragments for higher quality streams. Less for lower.
        hls_playlist_length 5s;

        # Too much time deviance here.
        # hls_fragment 3;
        # hls_playlist_length 60;

        hls_fragment_naming timestamp;

        # Generates an hls/test.m3u8 that links to either
        # test_potato/index.m3u8 or a test_src/index.m3u8
        # with some metadata for consumers

        # Variant bandwidths will be read out for the newer videojs player
        hls_variant _potato BANDWIDTH=128000; # Low bitrate, sub-SD resolution potato
        hls_variant _src BANDWIDTH=2048000; # Source bitrate, source resolution
    }
}

